#! /usr/bin/env python

import sys
import os
import time
import urllib
import urllib2
import cookielib
import getpass
import signal
import re

import yaml

from BeautifulSoup import BeautifulSoup

__version__ = "0.9.0"

class DeleteBotError(Exception):
  pass

def usage():
  print "usage: xsterminate YAMLCONFIG"
  sys.exit()


def set_exit_handler(func):
  """
  Ripped mostly from http://tinyurl.com/6vgojg6
  """
  if os.name == "nt":
    try:
      import win32api
      win32api.SetConsoleCtrlHandler(func, True)
    except ImportError:
      version = ".".join(map(str, sys.version_info[:2]))
      raise Exception("pywin32 not installed for Python " + version)
  else:
    print "Setting signal handler."
    signal.signal(signal.SIGTERM, func)
    signal.signal(signal.SIGINT, func)


def setup():
  if len(sys.argv) == 1:
    config_file = "deletebot.yml"
  elif len(sys.argv) == 2:
    config_file = sys.argv[1]
  else:
    usage()
  yml = open(config_file).read()
  config = yaml.load(yml)

  luser_file = config['lusers']

  # remembers when the files were last changed
  file_changed = {'lusers': 0,
                  'config': os.path.getmtime(config_file)}

  #######################################################################
  # some constants
  #######################################################################

  bct_url = "https://bitcointalk.org/index.php"

  if config.get("password", None) is None:
    config['password'] = getpass.getpass()
 
  signin_params = urllib.urlencode({"action": "login2",
                                    "user": config['user'],
                                    "passwrd": config['password'],
                                    "cookielength": "-1",
                                    "hash_passwrd": ""})

  thread_params = urllib.urlencode({"topic": str(config['topic'])})


  #######################################################################
  # setup for cookies
  #######################################################################
  cj = cookielib.LWPCookieJar()

  if os.path.isfile(config['cookiefile']):
    cj.load(config['cookiefile'])

  opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
  urllib2.install_opener(opener)


  #######################################################################
  # make the requests
  #######################################################################
  # user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
  # txheaders =  {'User-agent' : user_agent}
  # req = urllib2.Request(bct_url, signin_params, txheaders)

  signin_url = bct_url + "?" + signin_params
  thread_url = bct_url + "?" + thread_params + ".new#new"

  if config['debug']:
    print
    print "Signin URL:"
    print signin_url


  #######################################################################
  # signin and print info
  #######################################################################
  try:
    signin = urllib2.urlopen(signin_url)
  except IOError, e:
    print 'Failed to open "%s".' % signin_url
    if hasattr(e, 'code'):
      print 'Failed with error code - %s.' % e.code
  else:
    login_good = False
    for cookie in cj:
      if str(cookie).startswith("<Cookie SMFCookie"):
        login_good = True
        break
   
    if config.setdefault("debug", False):
      signin_html = signin.read()
      afile = open("signin.html", "w")
      afile.write(signin_html)
      afile.close()

    if login_good:
      print "Login successful."
    else:
      print "Bad login info."
      raise SystemExit


  def signal_handler(signal, frame):
    print
    print "Caught exit signal."
    print "Saving cookies."
    cj.save(config['cookiefile'], True, True)
    raise SystemExit

  set_exit_handler(signal_handler)

  while True:

    lusers_changed = os.path.getmtime(luser_file)
    if lusers_changed > file_changed['lusers']: 
      if file_changed['lusers'] == 0:
        print "Loading list of lusers."
      else:
        print "Loading new list of lusers."
      file_changed['lusers'] = lusers_changed
      lusers = []
      for aline in open(config['lusers']):
        lusers.append(aline.strip())

    config_changed = os.path.getmtime(config_file)
    if config_changed > file_changed['config']:
      file_changed['config'] = config_changed
      try:
        yml = open(config_file).read()
        cfg = yaml.load(yml)
        can_change = ["sleep", "debug"]
        for setting in can_change:
          if config[setting] != cfg[setting]:
            tplt = "Changing setting '%s' to `%s`."
            print tplt % (setting, cfg[setting])
            config[setting] = cfg[setting]
        
      except Exception, e:
        # don't crash if a good config has already loaded
        print "Problem reloading '%s'." % config_file
        print "Error was:"
        print e

    try:
      if config['debug']:
        print "Reloading at %s." % time.ctime()
      thread = urllib2.urlopen(thread_url)
      thread_html = ""
      timeout = 0
      while len(thread_html) == 0:
        if timeout > 120:
          print "Getting new messages timed out. Trying again."
          break
        time.sleep(0.1)
        timeout += 0.1
        thread_html = thread.read()
      if timeout > 120:
        continue
      if config['debug']:
        f = open("thread.html", "w")
        f.write(thread_html)
        f.close()
    except IOError, e:
      print 'Failed to open "%s".' % thread_url
      if hasattr(e, 'code'):
        print 'Failed with error code - %s.' % e.code

    soup = BeautifulSoup(thread_html)

    if soup.findAll('a')[1].text == "login":
      print "Session terminated, logging in again in 50 seconds."
      time.sleep(50)
      return

    user_links = soup.findAll('td', {'class': 'poster_info'})
    td_buttons = soup.findAll('td', {'class': 'td_buttons'})

    links_buttons = zip(user_links, td_buttons)

    deletes = []
 
    for i, luser in enumerate(lusers):
      for lnk, btn in links_buttons:
        links = lnk.findAll("a")
        if luser == links[0].text:
          try:
            deletes.append((luser, btn.findAll("a")[-2]["href"]))
          except Exception, e:
            with open("crashreport", "wa") as f:
              f.write("============\nEXCEPTION\n\n")
              f.write(str(e) + "\n\n")
              f.write("Luser: %s\n\n" % luser)
              f.write("--- HTML ---\n")
              f.write(thread_html + "\n")
              f.write("============\n")
      
    if deletes:
      for i, (u, d) in enumerate(deletes):
        print d
        msg = re.search(r'msg=(\d+)', d).group(1)
        print "Deleted message `%s` of luser `%s`." % (msg, u)
        urllib2.urlopen(d)

    time.sleep(config['sleep'])

def main():
  print "XSTerminate v%s" % __version__
  while True:
    setup()

if __name__ == "__main__":
  main()
